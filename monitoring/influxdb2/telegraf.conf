# Telegraf Configuration for TransmissionVPN Monitoring

[global_tags]
  service = "transmissionvpn"
  environment = "production"

[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "$INFLUX_TOKEN"
  organization = "$INFLUX_ORG"
  bucket = "$INFLUX_BUCKET"
  timeout = "5s"
  user_agent = "telegraf"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# TransmissionVPN Prometheus Metrics
[[inputs.prometheus]]
  urls = ["http://transmissionvpn:9099/metrics"]
  # Alternative for external TransmissionVPN:
  # urls = ["http://rocky.gamull.com:9099/metrics"]
  
  metric_version = 2
  interval = "30s"
  timeout = "10s"
  
  # Add custom tags
  [inputs.prometheus.tags]
    source = "transmissionvpn"
    type = "application"

# TransmissionVPN Health Endpoint (JSON)
[[inputs.http]]
  urls = ["http://transmissionvpn:9099/health"]
  # Alternative for external TransmissionVPN:
  # urls = ["http://rocky.gamull.com:9099/health"]
  
  timeout = "15s"
  method = "GET"
  data_format = "json_v2"
  interval = "60s"
  
  # Add custom tags
  [inputs.http.tags]
    source = "transmissionvpn"
    type = "health"
  
  # Parse JSON health data
  [[inputs.http.json_v2]]
    measurement_name = "transmissionvpn_health"
    
    # System metrics
    [[inputs.http.json_v2.object]]
      path = "system"
      tags = ["hostname"]
      
      [[inputs.http.json_v2.object.field]]
        path = "uptime_seconds"
        type = "int"
      
      [[inputs.http.json_v2.object.field]]
        path = "load_average.0"
        rename = "load_1m"
        type = "float"
      
      [[inputs.http.json_v2.object.field]]
        path = "load_average.1"
        rename = "load_5m"
        type = "float"
      
      [[inputs.http.json_v2.object.field]]
        path = "load_average.2"
        rename = "load_15m"
        type = "float"
      
      [[inputs.http.json_v2.object.field]]
        path = "memory.MemTotal"
        rename = "memory_total"
        type = "int"
      
      [[inputs.http.json_v2.object.field]]
        path = "memory.MemAvailable"
        rename = "memory_available"
        type = "int"
      
      [[inputs.http.json_v2.object.field]]
        path = "memory.MemFree"
        rename = "memory_free"
        type = "int"
      
      [[inputs.http.json_v2.object.field]]
        path = "disk.total_bytes"
        rename = "disk_total"
        type = "int"
      
      [[inputs.http.json_v2.object.field]]
        path = "disk.used_bytes"
        rename = "disk_used"
        type = "int"
      
      [[inputs.http.json_v2.object.field]]
        path = "disk.available_bytes"
        rename = "disk_available"
        type = "int"
      
      [[inputs.http.json_v2.object.field]]
        path = "disk.usage_percent"
        rename = "disk_usage_percent"
        type = "int"
    
    # VPN metrics
    [[inputs.http.json_v2.object]]
      path = "vpn"
      tags = ["interface", "status", "ip_address", "external_ip"]
      
      [[inputs.http.json_v2.object.field]]
        path = "connected"
        type = "bool"
    
    # Transmission metrics
    [[inputs.http.json_v2.object]]
      path = "transmission"
      
      [[inputs.http.json_v2.object.field]]
        path = "web_ui_accessible"
        type = "bool"
      
      [[inputs.http.json_v2.object.field]]
        path = "rpc_accessible"
        type = "bool"
      
      [[inputs.http.json_v2.object.field]]
        path = "daemon_running"
        type = "bool"
      
      [[inputs.http.json_v2.object.field]]
        path = "response_time_ms"
        type = "int"
    
    # Overall status
    [[inputs.http.json_v2.field]]
      path = "timestamp"
      type = "int"
    
    [[inputs.http.json_v2.tag]]
      path = "status"
    
    [[inputs.http.json_v2.tag]]
      path = "version"

# System metrics from the host
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

[[inputs.net]]

[[inputs.netstat]]

# Docker metrics
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  container_name_include = ["transmission*", "*vpn*"]
  container_name_exclude = []
  timeout = "5s"
  docker_label_include = []
  docker_label_exclude = []
  tag_env = ["TRANSMISSION_*", "VPN_*", "METRICS_*"]

# Docker container logs (optional)
[[inputs.docker_log]]
  endpoint = "unix:///var/run/docker.sock"
  from_beginning = false
  timeout = "5s"
  container_name_include = ["transmission"]
  container_name_exclude = []
  
  # Parse log levels
  [inputs.docker_log.tags]
    service = "transmissionvpn"

# HTTP response time monitoring
[[inputs.http_response]]
  urls = [
    "http://transmissionvpn:9091/transmission/web/",
    "http://transmissionvpn:9099/health",
    "http://transmissionvpn:9099/metrics"
  ]
  # Alternative for external TransmissionVPN:
  # urls = [
  #   "http://rocky.gamull.com:9091/transmission/web/",
  #   "http://rocky.gamull.com:9099/health",
  #   "http://rocky.gamull.com:9099/metrics"
  # ]
  
  method = "GET"
  timeout = "10s"
  follow_redirects = false
  
  [inputs.http_response.tags]
    service = "transmissionvpn"

# DNS query monitoring
[[inputs.dns_query]]
  servers = ["8.8.8.8", "1.1.1.1"]
  domains = ["google.com", "github.com"]
  record_type = "A"
  port = 53
  timeout = "2s"

# Ping monitoring for connectivity
[[inputs.ping]]
  urls = ["google.com", "github.com", "1.1.1.1"]
  count = 3
  ping_timeout = 5.0
  timeout = 10.0
  
  [inputs.ping.tags]
    test_type = "connectivity"

###############################################################################
#                            PROCESSOR PLUGINS                               #
###############################################################################

# Add calculated fields
[[processors.converter]]
  [processors.converter.fields]
    integer = ["*_bytes", "*_count", "*_percent"]
    float = ["*_rate", "*_speed", "load_*"]

# Add derived metrics
[[processors.starlark]]
  source = '''
def apply(metric):
    # Calculate memory usage percentage
    if metric.name == "transmissionvpn_health" and "memory_total" in metric.fields and "memory_available" in metric.fields:
        total = metric.fields.get("memory_total", 0)
        available = metric.fields.get("memory_available", 0)
        if total > 0:
            used = total - available
            usage_percent = (used / total) * 100
            metric.fields["memory_usage_percent"] = usage_percent
    
    # Calculate disk usage percentage if not present
    if metric.name == "transmissionvpn_health" and "disk_total" in metric.fields and "disk_used" in metric.fields:
        total = metric.fields.get("disk_total", 0)
        used = metric.fields.get("disk_used", 0)
        if total > 0 and "disk_usage_percent" not in metric.fields:
            usage_percent = (used / total) * 100
            metric.fields["disk_usage_percent"] = usage_percent
    
    return metric
'''

###############################################################################
#                            AGGREGATOR PLUGINS                              #
###############################################################################

# Calculate rates and derivatives
[[aggregators.derivative]]
  period = "60s"
  max_roll_over = 1
  
  namepass = ["transmission_*"]
  fieldpass = ["*_bytes", "*_downloaded", "*_uploaded"]
  
  [aggregators.derivative.tags]
    aggregation = "rate"

# Calculate moving averages
[[aggregators.basicstats]]
  period = "5m"
  drop_original = false
  stats = ["mean", "min", "max", "stdev"]
  
  namepass = ["transmission_*", "transmissionvpn_health"]
  fieldpass = ["*_rate", "*_speed", "response_time*", "load_*"] 