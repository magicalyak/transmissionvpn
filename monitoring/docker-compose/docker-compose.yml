version: "3.8"

services:
  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1y'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Health metrics service for VPN and container status
  health-metrics:
    image: python:3.11-slim
    container_name: transmissionvpn-health-metrics
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/health-metrics-server.py:/app/health-metrics-server.py
    working_dir: /app
    environment:
      - HEALTH_METRICS_PORT=8080
      - TRANSMISSION_CONTAINER=transmission
      - HEALTH_SCRAPE_INTERVAL=30
    command: >
      sh -c "
        apt-get update && apt-get install -y docker.io curl &&
        python health-metrics-server.py
      "
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Uncomment if you want to run TransmissionVPN here instead of separately
  # transmissionvpn:
  #   image: magicalyak/transmissionvpn:latest
  #   container_name: transmissionvpn
  #   env_file:
  #     - ../transmission.env
  #   cap_add:
  #     - NET_ADMIN
  #   devices:
  #     - /dev/net/tun:/dev/net/tun     
  #   ports:
  #     - "9091:9091"    # Transmission Web UI
  #     - "8118:8118"    # Privoxy HTTP proxy
  #     - "9099:9099"    # Prometheus metrics
  #   volumes:
  #     - ../config:/config
  #     - ../downloads:/downloads
  #     - ../watch:/watch
  #   restart: unless-stopped
  #   networks:
  #     - monitoring
  #   healthcheck:
  #     test: ["CMD", "/root/healthcheck.sh"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s

volumes:
  prometheus-data:
  grafana-data:

networks:
  monitoring:
    name: monitoring
    driver: bridge 