---
name: Build and Publish Docker Image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+-r[0-9]+'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/transmissionvpn

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug environment
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Owner: ${{ github.repository_owner }}"
          echo "Image: ${{ env.IMAGE_NAME }}"
          echo "Ref: ${{ github.ref }}"

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: magicalyak/transmissionvpn
          tags: |
            # A git tag is a pointer to a specific commit. When a tag is pushed,
            # this workflow will run and create a Docker image with that tag.
            # Example: v4.0.5-r0 -> 4.0.5-r0, 4.0.5, 4.0, 4
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # When a commit is pushed to the `main` branch, the `latest` tag
            # will be updated.
            type=raw,value=latest,enable={{is_default_branch}}

            # When a commit is pushed to any other branch, a tag with the
            # branch name will be created.
            # Example: develop -> develop
            type=ref,event=branch

            # A sha-<hash> tag is created for every commit, regardless of
            # the branch or event type. This is useful for debugging.
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
          # build-args: |
          #   TRANSMISSION_VERSION=${{ steps.meta.outputs.version }}
          #   VCS_REF=${{ steps.meta.outputs.version }}
          #   BUILD_DATE=${{ steps.meta.outputs.created }}

  # Optional: Create GitHub Release when a new Git tag is pushed
  create-release:
    needs: build-and-push # Run after build and push
    if: startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/tags/4.') # Only run for tag pushes
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for release-drafter to get full commit history

      - name: Draft release notes
        id: draft_release
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml # Optional: if you have custom config
          publish: true # Automatically publish the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Release URL
        run: echo "Release URL is ${{ steps.draft_release.outputs.html_url }}"
